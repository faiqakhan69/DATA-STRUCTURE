Data structures are ways to organize, store, and manage data efficiently. They are fundamental in computer science and programming to handle data optimally.

1. Types of Data Structures
Data structures are broadly classified into Linear and Non-Linear types.

A. Linear Data Structures (Sequential Arrangement)
Array

A fixed-size collection of elements stored in contiguous memory locations.
Example:
c
Copy
Edit
int arr[5] = {1, 2, 3, 4, 5};
Operations: Access by index, traversal, insertion, and deletion.
Linked List

A collection of nodes where each node contains data and a pointer to the next node.
Types: Singly Linked List, Doubly Linked List, Circular Linked List
Example (Singly Linked List Node in C):
c
Copy
Edit
struct Node {
    int data;
    struct Node* next;
};
Stack (LIFO - Last In, First Out)

Supports operations Push (Insert) and Pop (Remove).
Can be implemented using arrays or linked lists.
Example:
c
Copy
Edit
#include <stdio.h>
#define SIZE 5
int stack[SIZE], top = -1;
Queue (FIFO - First In, First Out)

Supports operations Enqueue (Insert) and Dequeue (Remove).
Types: Simple Queue, Circular Queue, Priority Queue, Deque (Double-Ended Queue).
Example (Queue using array in C):
c
Copy
Edit
#define SIZE 5
int queue[SIZE], front = -1, rear = -1;
B. Non-Linear Data Structures (Hierarchical or Graph-Based)
Tree

A hierarchical structure with nodes.
Types: Binary Tree, Binary Search Tree (BST), AVL Tree, Heap, B-Trees.
Example (Binary Tree Node in C):
c
Copy
Edit
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};
Graph

A collection of vertices (nodes) and edges (connections).
Represented using:
Adjacency Matrix
Adjacency List
Example (Graph using Adjacency List in C):
c
Copy
Edit
